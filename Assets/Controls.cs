//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""MainControls"",
            ""id"": ""6b7a962c-5365-4a04-aae2-8077de7ec66e"",
            ""actions"": [
                {
                    ""name"": ""Grow"",
                    ""type"": ""Button"",
                    ""id"": ""012467d5-e920-4d94-99ef-1553a3ad7e13"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GrowthDirection"",
                    ""type"": ""Value"",
                    ""id"": ""83026bc6-6754-4013-a682-d2042827f59e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraMovement"",
                    ""type"": ""Value"",
                    ""id"": ""0d514c7f-23ff-460c-97df-6ff706e300e5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1560328f-251a-4977-b247-eb8ed9ace44a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KMB"",
                    ""action"": ""Grow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec401cad-18a3-4570-8fcd-8a93ab48e712"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Grow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WSAD"",
                    ""id"": ""e000ac68-b735-4686-bffc-d3b9b782d38a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GrowthDirection"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7e7d2b8c-7911-4e23-9c7d-8e7cfd77c85d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KMB"",
                    ""action"": ""GrowthDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""485571a9-3b95-4214-8a85-df396d38ef1b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KMB"",
                    ""action"": ""GrowthDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f1e7860a-2232-4319-bb7b-a948147c8754"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KMB"",
                    ""action"": ""GrowthDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a14fb973-cc28-4d4d-bef2-594585994cd6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KMB"",
                    ""action"": ""GrowthDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2278160e-ca9e-4556-9adb-0205246861ef"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""GrowthDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5afe9d2f-85f0-4577-aaf5-7155231f3669"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KMB"",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""173fbf28-e9d0-4c3b-9eb8-55be8131d15a"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KMB"",
            ""bindingGroup"": ""KMB"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MainControls
        m_MainControls = asset.FindActionMap("MainControls", throwIfNotFound: true);
        m_MainControls_Grow = m_MainControls.FindAction("Grow", throwIfNotFound: true);
        m_MainControls_GrowthDirection = m_MainControls.FindAction("GrowthDirection", throwIfNotFound: true);
        m_MainControls_CameraMovement = m_MainControls.FindAction("CameraMovement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainControls
    private readonly InputActionMap m_MainControls;
    private List<IMainControlsActions> m_MainControlsActionsCallbackInterfaces = new List<IMainControlsActions>();
    private readonly InputAction m_MainControls_Grow;
    private readonly InputAction m_MainControls_GrowthDirection;
    private readonly InputAction m_MainControls_CameraMovement;
    public struct MainControlsActions
    {
        private @Controls m_Wrapper;
        public MainControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grow => m_Wrapper.m_MainControls_Grow;
        public InputAction @GrowthDirection => m_Wrapper.m_MainControls_GrowthDirection;
        public InputAction @CameraMovement => m_Wrapper.m_MainControls_CameraMovement;
        public InputActionMap Get() { return m_Wrapper.m_MainControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainControlsActions set) { return set.Get(); }
        public void AddCallbacks(IMainControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_MainControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainControlsActionsCallbackInterfaces.Add(instance);
            @Grow.started += instance.OnGrow;
            @Grow.performed += instance.OnGrow;
            @Grow.canceled += instance.OnGrow;
            @GrowthDirection.started += instance.OnGrowthDirection;
            @GrowthDirection.performed += instance.OnGrowthDirection;
            @GrowthDirection.canceled += instance.OnGrowthDirection;
            @CameraMovement.started += instance.OnCameraMovement;
            @CameraMovement.performed += instance.OnCameraMovement;
            @CameraMovement.canceled += instance.OnCameraMovement;
        }

        private void UnregisterCallbacks(IMainControlsActions instance)
        {
            @Grow.started -= instance.OnGrow;
            @Grow.performed -= instance.OnGrow;
            @Grow.canceled -= instance.OnGrow;
            @GrowthDirection.started -= instance.OnGrowthDirection;
            @GrowthDirection.performed -= instance.OnGrowthDirection;
            @GrowthDirection.canceled -= instance.OnGrowthDirection;
            @CameraMovement.started -= instance.OnCameraMovement;
            @CameraMovement.performed -= instance.OnCameraMovement;
            @CameraMovement.canceled -= instance.OnCameraMovement;
        }

        public void RemoveCallbacks(IMainControlsActions instance)
        {
            if (m_Wrapper.m_MainControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_MainControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainControlsActions @MainControls => new MainControlsActions(this);
    private int m_KMBSchemeIndex = -1;
    public InputControlScheme KMBScheme
    {
        get
        {
            if (m_KMBSchemeIndex == -1) m_KMBSchemeIndex = asset.FindControlSchemeIndex("KMB");
            return asset.controlSchemes[m_KMBSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IMainControlsActions
    {
        void OnGrow(InputAction.CallbackContext context);
        void OnGrowthDirection(InputAction.CallbackContext context);
        void OnCameraMovement(InputAction.CallbackContext context);
    }
}
